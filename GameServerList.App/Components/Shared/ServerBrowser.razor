<MudContainer Class="mt-3" MaxWidth="MaxWidth.ExtraExtraLarge">
    <MudSelect Label="Select a game" T="int" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" @bind-Value="@_activeGame" @bind-Value:after="SelectedGame">
    @foreach (var item in GameList.Games.Select((g, i) => new { game = g, index = i }))
    {
        <MudSelectItem Value="@(item.index)">
            <img src="@($"{item.game.Icon}.jpg")" width="16" class="mr-1" />
            @(item.game.Name)
        </MudSelectItem>
    }
    </MudSelect>

    <MudTable Class="mt-3" Items="@GetServers()" Virtualize="true" Hover="true" Dense="true" FixedHeader="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info" SortLabel="Sort By" Height="75vh">
        <ToolBarContent>       
            <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
                <MudText Typo="Typo.subtitle1" Class="mr-4"><strong>@(_serversFound)</strong> servers found</MudText>
                <MudCheckBox T="bool" @bind-Value="@_hideFullServers" @bind-Value:after="UpdateLocalStorage">Server not full</MudCheckBox>
                <MudCheckBox T="bool" @bind-Value="@_hideEmptyServers" @bind-Value:after="UpdateLocalStorage">Has users playing</MudCheckBox>
                <MudSpacer />
                <MudTextField @bind-Value="_searchString" @bind-Value:after="UpdateLocalStorage" Placeholder="Map" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                <MudButton Variant="Variant.Text" Color="Color.Info" Size="Size.Small" title="Refresh" OnClick="async () => { await SelectedGame(); }">
                @if(_loading)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                }
                else
                {
                    <MudIcon Icon="@Icons.Material.Filled.Refresh" />
                }                    
                </MudButton>
            </MudHidden>
            <MudHidden Breakpoint="Breakpoint.MdAndUp">
                <MudTextField @bind-Value="_searchString" @bind-Value:after="UpdateLocalStorage" Placeholder="Map" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Class="mt-0"></MudTextField>
            </MudHidden>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<GameServerItem, object>(x => x.Name)">Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<GameServerItem, object>(x => x.CurrentPlayers)">Players</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<GameServerItem, object>(x => x.Map)">Map</MudTableSortLabel></MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name.Truncate(65)</MudTd>
            <MudTd DataLabel="Players">@(context.CurrentPlayers)/@(context.MaxPlayers)</MudTd>
            <MudTd DataLabel="Map">@context.Map.Truncate(65)</MudTd>
            <MudTd HideSmall="true" Style="text-align:right">
                <MudIconButton Icon="@Icons.Material.Filled.ArrowOutward" Variant="Variant.Text" Color="Color.Info" Size="Size.Small" Title="Connect" Href="@($"steam://connect/{context.Address}")" />
                <MudIconButton Icon="@(context.ShouldShowDetails ? Icons.Material.Filled.KeyboardArrowUp : Icons.Material.Filled.KeyboardArrowDown)" Variant="Variant.Text" Color="Color.Info" Size="Size.Small" Title="Show/Hide server details" OnClick="async () => { await ToggleServerDetails(context); }" />
            </MudTd>
        </RowTemplate>
        <ChildRowContent>
        @if(context.ShouldShowDetails)
        {
            <MudTr>
                <td colspan="4">
                    <MudCard Elevation="0">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.button">Server Details</MudText>
                                <MudDivider Light />
                                <MudText Align="Align.Left" Typo="Typo.body2" Class="mt-4 ml-2 mb-0 pb-0">
                                    <strong>OS</strong>: @(context.OperatingSystem == "w" ? "Windows" : "Linux"),
                                    <strong>Version</strong>: @context.Version,
                                    <strong>VAC</strong>: @((context.IsVACEnabled ?? false) ? "Yes" : "No"),
                                    <strong>Dedicated Server</strong>: @((context.IsDedicatedServer ?? false) ? "Yes" : "No"),
                                    <strong>Bots</strong>: @context.Bots
                                </MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        @if (GetPlayerInfo(context)?.Any() ?? false)
                        {
                        <MudCardContent Class="pt-0 pb-4 pl-3 pr-3">
                            <MudTable Items="@GetPlayerInfo(context)" Context="PlayerContext" Hover="true" Dense="true" FixedHeader="true" Breakpoint="Breakpoint.Xs" Elevation="0" Height="200px">
	                            <ColGroup>
		                            <col />
		                            <col style="width:100px;"/>
		                            <col style="width:100px;" />
	                            </ColGroup>
	                            <HeaderContent>
		                            <MudTh>Player Name</MudTh>
		                            <MudTh>Score</MudTh>
		                            <MudTh>Time</MudTh>
	                            </HeaderContent>
	                            <RowTemplate>
		                            <MudTd DataLabel="Player Name">@PlayerContext.Name</MudTd>
		                            <MudTd DataLabel="Score">@PlayerContext.Score</MudTd>
		                            <MudTd DataLabel="Time">@PlayerContext.GetDurationPlayed()</MudTd>
	                            </RowTemplate>
                            </MudTable>
                        </MudCardContent>
                        }
                        </MudCard>
                    <MudDivider Light />
                </td>                
            </MudTr>
        }
        </ChildRowContent>
    </MudTable>
</MudContainer>

@code {
    private bool _loading;
    private bool _hideFullServers;
    private bool _hideEmptyServers;
    private string _searchString;
    private int _serversFound;
    private int _activeGame;
    private List<GameServerItem> _servers;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender is false)
            return;

        await LoadLocalStorage();
        await SelectedGame();
        StateHasChanged();
    }

    protected async Task LoadLocalStorage()
    {
        _activeGame = await _localStorage.GetItemAsync<int>("selected-game");
        _hideEmptyServers = await _localStorage.GetItemAsync<bool>("game-filter-noempty");
        _hideFullServers = await _localStorage.GetItemAsync<bool>("game-filter-nofull");
        _searchString = await _localStorage.GetItemAsync<string>("game-filter-map");
    }

    protected async Task UpdateLocalStorage()
    {
        await _localStorage.SetItemAsync("selected-game", _activeGame);
        await _localStorage.SetItemAsync("game-filter-noempty", _hideEmptyServers);
        await _localStorage.SetItemAsync("game-filter-nofull", _hideFullServers);
        await _localStorage.SetItemAsync("game-filter-map", _searchString);
    }

    protected async Task SelectedGame()
    {
        _loading = true;
        _servers = await _serverBrowserService.FetchServers(GameList.GetGameByIndex(_activeGame));
        _loading = false;
        await UpdateLocalStorage();
    }

    protected async Task ToggleServerDetails(GameServerItem element)
    {
        element.ActivePlayers = await _serverPlayerInfoService.FetchPlayerDetails(element);
        element.ShouldShowDetails = !element.ShouldShowDetails;
    }

    protected List<GameServerItem> GetServers()
    {
        if (_servers is null)
        {
            _serversFound = 0;
            return new List<GameServerItem>();
        }

        var items = _servers
            .Where(
                s => (!_hideFullServers || (s.CurrentPlayers < s.MaxPlayers)) &&
                (!_hideEmptyServers || s.CurrentPlayers > 0) &&
                (string.IsNullOrEmpty(_searchString) || string.IsNullOrEmpty(s.Map) || s.Map.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            )
            .ToList();
        _serversFound = items.Count;

        return items;
    }

    protected List<PlayerInfo> GetPlayerInfo(GameServerItem element)
    {
        return element.ActivePlayers;
    }
}