<MudContainer Class="mt-3" MaxWidth="MaxWidth.ExtraExtraLarge">
    <MudSelect Label="Select a game" T="int" Variant="Variant.Outlined" ValueChanged=@SelectedGame>
    @foreach (var item in GameList.Games.Select((g, i) => new { game = g, index = i }))
    {
        <MudSelectItem Value="@(item.index)">
            <img src="@($"{item.game.Icon}.jpg")" width="16" class="mr-1" />
            @(item.game.Name)
        </MudSelectItem>
    }
    </MudSelect>

    <MudTable Class="mt-3" Items="@GetServers()" Hover="true" Virtualize="true" Dense="true" FixedHeader="true" Breakpoint="Breakpoint.Xs" Loading="@_loading" LoadingProgressColor="Color.Info" SortLabel="Sort By" Height="75vh">
        <ToolBarContent>        
            <MudText Typo="Typo.subtitle1" Class="mr-4"><strong>@(_serversFound)</strong> servers found</MudText>
            <MudCheckBox @bind-Checked="@_hideFullServers">Server not full</MudCheckBox>
            <MudCheckBox @bind-Checked="@_hideEmptyServers">Has users playing</MudCheckBox>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Map" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            <MudButton Variant="Variant.Text" Color="Color.Info" Size="Size.Small" title="Refresh" OnClick="async () => { await SelectedGame(_activeGame); }">
            @if(_loading)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Filled.Refresh" />
            }                    
            </MudButton>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<GameServerItem, object>(x => x.Name)">Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<GameServerItem, object>(x => x.CurrentPlayers)">Players</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<GameServerItem, object>(x => x.Map)">Map</MudTableSortLabel></MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Players">@(context.CurrentPlayers)/@(context.MaxPlayers)</MudTd>
            <MudTd DataLabel="Map">@context.Map</MudTd>
            <MudTd>
                <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
                    <MudTooltip>
                        <ChildContent>
                                <MudIcon Icon="@Icons.Material.Outlined.Info" Color="Color.Warning" Size="Size.Small" Class="mr-1" />
                        </ChildContent>
                        <TooltipContent>
                            <MudText Align="Align.Left" Typo="Typo.body2"><strong>OS</strong>: @(context.OperatingSystem == "w" ? "Windows" : "Linux")</MudText>
                            <MudText Align="Align.Left" Typo="Typo.body2"><strong>Version</strong>: @context.Version</MudText>
                            <MudText Align="Align.Left" Typo="Typo.body2"><strong>VAC</strong>: @((context.IsVACEnabled ?? false) ? "Yes" : "No")</MudText>
                            <MudText Align="Align.Left" Typo="Typo.body2"><strong>Dedicated Server</strong>: @((context.IsDedicatedServer ?? false) ? "Yes" : "No")</MudText>
                            <MudText Align="Align.Left" Typo="Typo.body2"><strong>Bots</strong>: @context.Bots</MudText>
                        </TooltipContent>                            
                    </MudTooltip>
                    <MudLink Href="@($"steam://connect/{context.Address}")">
                        <MudIcon Icon="@Icons.Material.Filled.ArrowOutward" Title="Connect" Size="Size.Small" />
                    </MudLink>
                </MudHidden>
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudContainer>

@code {
    private bool _loading;
    private bool _hideFullServers;
    private bool _hideEmptyServers;
    private string _searchString;
    private int _serversFound;
    private int _activeGame;
    private List<GameServerItem> _servers;

    protected override async Task OnInitializedAsync()
    {
        await SelectedGame(0);
    }

    protected async Task SelectedGame(int value)
    {
        _activeGame = value;
        _loading = true;
        _servers = await _serverBrowserService.FetchServers(GameList.GetGameByIndex(value));
        _loading = false;
    }

    protected List<GameServerItem> GetServers()
    {
        if (_servers is null)
        {
            _serversFound = 0;
            return new List<GameServerItem>();
        }

        var items = _servers
            .Where(
                s => (!_hideFullServers || (s.CurrentPlayers < s.MaxPlayers)) &&
                (!_hideEmptyServers || s.CurrentPlayers > 0) &&
                (string.IsNullOrEmpty(_searchString) || string.IsNullOrEmpty(s.Map) || s.Map.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            )
            .ToList();
        _serversFound = items.Count;

        return items;
    }
}